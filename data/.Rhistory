setwd("~/Documents/QUEST/PhD/R/Simulation_framework/data")
rm(list = ls())
library(tidyverse)
library(ggpubr)
library(ggridges)
### read in data sets from the different trajectories
### using sequential design in confirmatory study
final_1 <- read.csv(file = "equiv_method1_seq_onesided")
final_2 <- read.csv(file = "equiv_method2_seq_onesided")
final_3 <- read.csv(file = "equiv_method3_seq_onesided")
final_4 <- read.csv(file = "sig_method1_seq_onesided")
final_5 <- read.csv(file = "sig_method2_seq_onesided")
final_6 <- read.csv(file = "sig_method3_seq_onesided")
### create one data file containing all data
final <- rbind(final_1, final_2, final_3, final_4, final_5, final_6)
### add column that codes decision criterion from exploratory stage to confirmatory stage
final$decision_crit <- c(rep("equivalence", nrow(final_1) + nrow(final_2) + nrow(final_3)),
rep("significance", nrow(final_4) + nrow(final_5) + nrow(final_6)))
### add column that codes approach to determine sample size for confirmatory study
final$sampsize_approach <- c(rep(1, nrow(final_1)), rep(2, nrow(final_2)), rep(3, nrow(final_3)),
rep(1, nrow(final_4)), rep(2, nrow(final_5)), rep(3, nrow(final_6)))
### add column that codes design applied in confirmatory study
final$design <- rep("group_sequential")
### exclude all cases that do not have either a significant or futile outcome
### select columns relevant for plotting
datseq <-
final %>%
filter(H0 != 0) %>%
select(rep_no, decision_crit, sampsize_approach,
design, totalN, nstage, ES_true, d_emp, H0)
### read in data sets from the different trajectories
### using fixed-N design in confirmatory study
final_fix1 <- read.csv(file = "equiv_method1_fixN_onesided")
final_fix2 <- read.csv(file = "equiv_method2_fixN_onesided")
final_fix3 <- read.csv(file = "equiv_method3_fixN_onesided")
final_fix4 <- read.csv(file = "sig_method1_fixN_onesided")
final_fix5 <- read.csv(file = "sig_method2_fixN_onesided")
final_fix6 <- read.csv(file = "sig_method3_fixN_onesided")
### create one data file containing all data
finalfix <- rbind(final_fix1, final_fix2, final_fix3, final_fix4, final_fix5, final_fix6)
### add column that codes decision criterion from exploratory stage to confirmatory stage
finalfix$decision_crit <- c(rep("equivalence", nrow(final_fix1) + nrow(final_fix2) + nrow(final_fix3)),
rep("significance", nrow(final_fix4) + nrow(final_fix5) + nrow(final_fix6)))
### add column that codes approach to determine sample size for confirmatory study
finalfix$sampsize_approach <- c(rep(1, nrow(final_fix1)), rep(2, nrow(final_fix2)), rep(3, nrow(final_fix3)),
rep(1, nrow(final_fix4)), rep(2, nrow(final_fix5)), rep(3, nrow(final_fix6)))
### add column that codes design applied in confirmatory study
finalfix$design <- rep("fixN")
### add column for outcome significant / not significant to match outcome column
### of sequential design data set
finalfix$H0 <- ifelse(finalfix$p_value <= .05, 2, 1)
### rename column to match column of sequential design data set
finalfix$nstage <- finalfix$totalN
### select columns relevant for plotting
datfix <-
finalfix %>%
select(rep_no, decision_crit, sampsize_approach,
design, totalN, nstage, ES_true, d_emp, H0)
### combine data sets containing sequential and fixed-N experiments
dat <- rbind(datseq, datfix)
### create data sets with only true ES > .3
dat_large_ES <-
dat %>%
filter(ES_true > .3)
final_1 <-
dat %>%
filter(ES_true > .3 &
decision_crit == "equivalence" &
sampsize_approach == 1 &
design == "group_sequential")
final_2 <-
dat %>%
filter(ES_true > .3,
decision_crit == "equivalence" &
sampsize_approach == 2 &
design == "group_sequential")
final_3 <-
dat %>%
filter(ES_true > .3,
decision_crit == "equivalence" &
sampsize_approach == 3 &
design == "group_sequential")
final_4 <-
dat %>%
filter(ES_true > .3,
decision_crit == "significance" &
sampsize_approach == 1 &
design == "group_sequential")
final_5 <-
dat %>%
filter(ES_true > .3,
decision_crit == "significance" &
sampsize_approach == 2 &
design == "group_sequential")
final_6 <-
dat %>%
filter(ES_true > .3,
decision_crit == "significance" &
sampsize_approach == 3 &
design == "group_sequential")
final_fix1 <-
datfix %>%
filter(ES_true > .3,
decision_crit == "equivalence" &
sampsize_approach == 1 &
design == "fixN")
final_fix2 <-
datfix %>%
filter(ES_true > .3,
decision_crit == "equivalence" &
sampsize_approach == 2 &
design == "fixN")
final_fix3<-
datfix %>%
filter(ES_true > .3,
decision_crit == "equivalence" &
sampsize_approach == 3 &
design == "fixN")
final_fix4 <-
datfix %>%
filter(ES_true > .3,
decision_crit == "significance" &
sampsize_approach == 1 &
design == "fixN")
final_fix5 <-
datfix %>%
filter(ES_true > .3,
decision_crit == "significance" &
sampsize_approach == 2 &
design == "fixN")
final_fix6 <-
datfix %>%
filter(ES_true > .3,
decision_crit == "significance" &
sampsize_approach == 3 &
design == "fixN")
animal_numbers <-
dat %>%
group_by(decision_crit, sampsize_approach, design) %>%
summarize(mean_N = mean(nstage))
### extract and count nonsignificant cases
false_neg <-
dat_large_ES %>%
group_by(decision_crit, sampsize_approach, design, H0) %>%
filter(H0 == 1) %>%
summarize(false_neg = n())
### add column coding total N of nonsinificant cases for each trajectory
false_neg$N <- c(nrow(final_fix1), nrow(final_1),
nrow(final_fix2), nrow(final_2),
nrow(final_fix3), nrow(final_3),
nrow(final_fix4), nrow(final_4),
nrow(final_fix5), nrow(final_5),
nrow(final_fix6), nrow(final_6))
### calculate percentage of nonsignificant findings
false_neg <-
false_neg %>%
mutate(false_neg_rate = false_neg/N*100)
### extract and count all significant outcomes
### (contains true and false positives)
all_positives <-
dat %>%
group_by(decision_crit, sampsize_approach, design, H0) %>%
filter(H0 == 2) %>%
summarize(all_pos = n())
### extract and count significant cases
true_pos <-
dat_large_ES %>%
group_by(decision_crit, sampsize_approach, design, H0) %>%
filter(H0 == 2) %>%
summarize(true_pos = n())
### add column coding total N of sinificant cases for each trajectory
true_pos$N <- c(nrow(final_fix1), nrow(final_1),
nrow(final_fix2), nrow(final_2),
nrow(final_fix3), nrow(final_3),
nrow(final_fix4), nrow(final_4),
nrow(final_fix5), nrow(final_5),
nrow(final_fix6), nrow(final_6))
### calculate percentage of significant findings
true_pos <-
true_pos %>%
mutate(true_pos_rate = true_pos/N*100)
true_pos$all_positives <- all_positives$all_pos
true_pos$false_pos <- true_pos$all_positives - true_pos$true_pos
true_pos$FDR <- true_pos$false_pos/true_pos$all_positives
true_pos$PPV <- true_pos$true_pos/true_pos$all_positives
outcome <-
true_pos %>%
select(decision_crit, sampsize_approach,
design, true_pos_rate, FDR, PPV)
outcome$false_neg_rate <- false_neg$false_neg_rate
outcome$mean_N <- animal_numbers$mean_N
outcome$design <- as.factor(outcome$design)
levels(outcome$design)
levels(outcome$design) <- c("Fixed-N \ndesign", "Group sequential \ndesign")
outcome$decision_crit <- as.factor(outcome$decision_crit)
levels(outcome$decision_crit)
levels(outcome$decision_crit) <- c("Equivalence", "Significance")
plot1 <-
ggplot(outcome , aes(x = factor(design), y = factor(sampsize_approach))) +
geom_raster(aes(fill = mean_N), interpolate = F) +
scale_fill_gradient2(low = "navy", high = "darkgoldenrod1",
mid = "white", midpoint = 100) +
labs(x = "Design", y = "Sample size calculation",
fill = "Mean # of \nanimals needed") +
scale_x_discrete(labels = c("Fixed-N \ndesign",
"Sequential \ndesign")) +
scale_y_discrete(labels = c("Safeguard", "Standard", "SESOI")) +
facet_wrap(~ decision_crit) +
theme_classic() +
theme(strip.text.x = element_text(size = 11, colour = "black", face = "bold")) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_blank()) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_text(size = 10, colour = "black",
angle = 45)) +
theme(legend.title = element_text(size = 11)) +
theme(legend.text = element_text(size = 11)) +
guides(fill = guide_colorbar(barwidth = 0.7, barheight = 6))
plot2 <-
ggplot(outcome , aes(x = factor(design), y = factor(sampsize_approach))) +
geom_raster(aes(fill = false_neg_rate), interpolate = F) +
scale_fill_gradient2(low = "navy", high = "darkgoldenrod1",
mid = "white", midpoint = 15) +
labs(x = "Design", y = "Approach to determine \nsample size",
fill = "Rate of \nfalse negatives") +
scale_x_discrete(labels = c("Fixed-N \ndesign",
"Sequential \ndesign")) +
scale_y_discrete(labels = c("Safeguard", "Standard", "SESOI")) +
facet_wrap(~ decision_crit) +
theme_classic() +
theme(strip.background = element_blank(),
strip.text.x = element_blank()) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 13)) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_text(size = 10, colour = "black",
angle = 45)) +
theme(legend.title = element_text(size = 11)) +
theme(legend.text = element_text(size = 11)) +
guides(fill = guide_colorbar(barwidth = 0.7, barheight = 6))
plot3 <-
ggplot(outcome , aes(x = factor(design), y = factor(sampsize_approach))) +
geom_raster(aes(fill = PPV*100), interpolate = F) +
scale_fill_gradient2(low = "navy", high = "darkgoldenrod1",
mid = "white", midpoint = 25) +
labs(x = "Design", y = "Sample size calculation",
fill = "Rate of \npositive predictive value") +
scale_x_discrete(labels = c("Fixed-N \ndesign",
"Sequential \ndesign")) +
scale_y_discrete(labels = c("Safeguard", "Standard", "SESOI")) +
facet_wrap(~ decision_crit) +
theme_classic() +
theme(strip.background = element_blank(),
strip.text.x = element_blank()) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(axis.title.x = element_text(size = 13)) +
theme(axis.title.y =element_blank()) +
theme(axis.text.x = element_text(size = 10, colour = "black")) +
theme(axis.text.y = element_text(size = 10, colour = "black",
angle = 45)) +
theme(legend.title = element_text(size = 11)) +
theme(legend.text = element_text(size = 11)) +
guides(fill = guide_colorbar(barwidth = 0.7, barheight = 6))
final_plot <-
ggarrange(plot1, plot2, plot3,
nrow = 3, ncol = 1,
align = "v",
heights = c(1, .9, 1.05),
legend = "right")
final_plot
plot3 <-
ggplot(outcome , aes(x = factor(design), y = factor(sampsize_approach))) +
geom_raster(aes(fill = PPV*100), interpolate = F) +
scale_fill_gradient2(low = "navy", high = "darkgoldenrod1",
mid = "white", midpoint = 55) +
labs(x = "Design", y = "Sample size calculation",
fill = "Rate of \npositive predictive value") +
scale_x_discrete(labels = c("Fixed-N \ndesign",
"Sequential \ndesign")) +
scale_y_discrete(labels = c("Safeguard", "Standard", "SESOI")) +
facet_wrap(~ decision_crit) +
theme_classic() +
theme(strip.background = element_blank(),
strip.text.x = element_blank()) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(axis.title.x = element_text(size = 13)) +
theme(axis.title.y =element_blank()) +
theme(axis.text.x = element_text(size = 10, colour = "black")) +
theme(axis.text.y = element_text(size = 10, colour = "black",
angle = 45)) +
theme(legend.title = element_text(size = 11)) +
theme(legend.text = element_text(size = 11)) +
guides(fill = guide_colorbar(barwidth = 0.7, barheight = 6))
final_plot <-
ggarrange(plot1, plot2, plot3,
nrow = 3, ncol = 1,
align = "v",
heights = c(1, .9, 1.05),
legend = "right")
final_plot
plot2 <-
ggplot(outcome , aes(x = factor(design), y = factor(sampsize_approach))) +
geom_raster(aes(fill = false_neg_rate), interpolate = F) +
scale_fill_gradient2(low = "navy", high = "darkgoldenrod1",
mid = "white", midpoint = 40) +
labs(x = "Design", y = "Approach to determine \nsample size",
fill = "Rate of \nfalse negatives") +
scale_x_discrete(labels = c("Fixed-N \ndesign",
"Sequential \ndesign")) +
scale_y_discrete(labels = c("Safeguard", "Standard", "SESOI")) +
facet_wrap(~ decision_crit) +
theme_classic() +
theme(strip.background = element_blank(),
strip.text.x = element_blank()) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 13)) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_text(size = 10, colour = "black",
angle = 45)) +
theme(legend.title = element_text(size = 11)) +
theme(legend.text = element_text(size = 11)) +
guides(fill = guide_colorbar(barwidth = 0.7, barheight = 6))
plot3 <-
ggplot(outcome , aes(x = factor(design), y = factor(sampsize_approach))) +
geom_raster(aes(fill = PPV*100), interpolate = F) +
scale_fill_gradient2(low = "navy", high = "darkgoldenrod1",
mid = "white", midpoint = 55) +
labs(x = "Design", y = "Sample size calculation",
fill = "Rate of \npositive predictive value") +
scale_x_discrete(labels = c("Fixed-N \ndesign",
"Sequential \ndesign")) +
scale_y_discrete(labels = c("Safeguard", "Standard", "SESOI")) +
facet_wrap(~ decision_crit) +
theme_classic() +
theme(strip.background = element_blank(),
strip.text.x = element_blank()) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(axis.title.x = element_text(size = 13)) +
theme(axis.title.y =element_blank()) +
theme(axis.text.x = element_text(size = 10, colour = "black")) +
theme(axis.text.y = element_text(size = 10, colour = "black",
angle = 45)) +
theme(legend.title = element_text(size = 11)) +
theme(legend.text = element_text(size = 11)) +
guides(fill = guide_colorbar(barwidth = 0.7, barheight = 6))
final_plot <-
ggarrange(plot1, plot2, plot3,
nrow = 3, ncol = 1,
align = "v",
heights = c(1, .9, 1.05),
legend = "right")
final_plot
plot2 <-
ggplot(outcome , aes(x = factor(design), y = factor(sampsize_approach))) +
geom_raster(aes(fill = false_neg_rate), interpolate = F) +
scale_fill_gradient2(low = "navy", high = "darkgoldenrod1",
mid = "white", midpoint = 35) +
labs(x = "Design", y = "Approach to determine \nsample size",
fill = "Rate of \nfalse negatives") +
scale_x_discrete(labels = c("Fixed-N \ndesign",
"Sequential \ndesign")) +
scale_y_discrete(labels = c("Safeguard", "Standard", "SESOI")) +
facet_wrap(~ decision_crit) +
theme_classic() +
theme(strip.background = element_blank(),
strip.text.x = element_blank()) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 13)) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_text(size = 10, colour = "black",
angle = 45)) +
theme(legend.title = element_text(size = 11)) +
theme(legend.text = element_text(size = 11)) +
guides(fill = guide_colorbar(barwidth = 0.7, barheight = 6))
plot3 <-
ggplot(outcome , aes(x = factor(design), y = factor(sampsize_approach))) +
geom_raster(aes(fill = PPV*100), interpolate = F) +
scale_fill_gradient2(low = "navy", high = "darkgoldenrod1",
mid = "white", midpoint = 55) +
labs(x = "Design", y = "Sample size calculation",
fill = "Rate of \npositive predictive value") +
scale_x_discrete(labels = c("Fixed-N \ndesign",
"Sequential \ndesign")) +
scale_y_discrete(labels = c("Safeguard", "Standard", "SESOI")) +
facet_wrap(~ decision_crit) +
theme_classic() +
theme(strip.background = element_blank(),
strip.text.x = element_blank()) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(axis.title.x = element_text(size = 13)) +
theme(axis.title.y =element_blank()) +
theme(axis.text.x = element_text(size = 10, colour = "black")) +
theme(axis.text.y = element_text(size = 10, colour = "black",
angle = 45)) +
theme(legend.title = element_text(size = 11)) +
theme(legend.text = element_text(size = 11)) +
guides(fill = guide_colorbar(barwidth = 0.7, barheight = 6))
final_plot <-
ggarrange(plot1, plot2, plot3,
nrow = 3, ncol = 1,
align = "v",
heights = c(1, .9, 1.05),
legend = "right")
final_plot
setwd("~/Documents/QUEST/PhD/R/Simulation_framework")
rm(list = ls())
library(pwr)
library(gsDesign)
#source additional functions
source("./scripts/safeguard_function.R")
source("./scripts/functions_for_sim.R")
# Step  1 Generate an effect size distribution
#ES_true <- c(rbeta(100000,6,5),rbeta(100000,1,5))
ES_true <- c(rbeta(100000, 1, 5))
hist(ES_true)
#how many hypothesis over .3 threshold
sum(ES_true > 0.3)
setwd("~/Documents/QUEST/PhD/R/Simulation_framework")
source("./scripts/prepare_data_for_plotting.R")
View(outcome)
0.167*0.924
1-0.583
1-0.167
0.154/(0.154 + (0.583*0.833))
0.583*0.833
0.154 + 0.485639
0.154/0.639639
setwd("~/Documents/QUEST/PhD/R/Simulation_framework")
source("~./prepare_data_for_plotting.R")
source("~.scripts/prepare_data_for_plotting.R")
source("~./scripts/prepare_data_for_plotting.R")
setwd("~/Documents/QUEST/PhD/R/Simulation_framework")
source("./scripts/prepare_data_for_plotting.R")
plot1 <-
ggplot(outcome , aes(x = factor(design), y = factor(sampsize_approach))) +
geom_raster(aes(fill = mean_N), interpolate = F) +
scale_fill_gradient2(low = "navy", high = "darkgoldenrod1",
mid = "white", midpoint = 100) +
labs(x = "Design", y = "Sample size calculation",
fill = "Mean # of \nanimals needed") +
scale_x_discrete(labels = c("Fixed-N \ndesign",
"Sequential \ndesign")) +
scale_y_discrete(labels = c("Safeguard", "Standard", "SESOI")) +
facet_wrap(~ decision_crit) +
theme_classic() +
theme(strip.text.x = element_text(size = 11, colour = "black", face = "bold")) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_blank()) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_text(size = 10, colour = "black",
angle = 45)) +
theme(legend.title = element_text(size = 11)) +
theme(legend.text = element_text(size = 11)) +
guides(fill = guide_colorbar(barwidth = 0.7, barheight = 6))
plot2 <-
ggplot(outcome , aes(x = factor(design), y = factor(sampsize_approach))) +
geom_raster(aes(fill = false_neg_rate), interpolate = F) +
scale_fill_gradient2(low = "navy", high = "darkgoldenrod1",
mid = "white", midpoint = 35) +
labs(x = "Design", y = "Approach to determine \nsample size",
fill = "Rate of \nfalse negatives") +
scale_x_discrete(labels = c("Fixed-N \ndesign",
"Sequential \ndesign")) +
scale_y_discrete(labels = c("Safeguard", "Standard", "SESOI")) +
facet_wrap(~ decision_crit) +
theme_classic() +
theme(strip.background = element_blank(),
strip.text.x = element_blank()) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(axis.title.x = element_blank()) +
theme(axis.title.y = element_text(size = 13)) +
theme(axis.text.x = element_blank()) +
theme(axis.text.y = element_text(size = 10, colour = "black",
angle = 45)) +
theme(legend.title = element_text(size = 11)) +
theme(legend.text = element_text(size = 11)) +
guides(fill = guide_colorbar(barwidth = 0.7, barheight = 6))
plot3 <-
ggplot(outcome , aes(x = factor(design), y = factor(sampsize_approach))) +
geom_raster(aes(fill = PPV*100), interpolate = F) +
scale_fill_gradient2(low = "navy", high = "darkgoldenrod1",
mid = "white", midpoint = 55) +
labs(x = "Design", y = "Sample size calculation",
fill = "Rate of \npositive predictive value") +
scale_x_discrete(labels = c("Fixed-N \ndesign",
"Sequential \ndesign")) +
scale_y_discrete(labels = c("Safeguard", "Standard", "SESOI")) +
facet_wrap(~ decision_crit) +
theme_classic() +
theme(strip.background = element_blank(),
strip.text.x = element_blank()) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(axis.title.x = element_text(size = 13)) +
theme(axis.title.y =element_blank()) +
theme(axis.text.x = element_text(size = 10, colour = "black")) +
theme(axis.text.y = element_text(size = 10, colour = "black",
angle = 45)) +
theme(legend.title = element_text(size = 11)) +
theme(legend.text = element_text(size = 11)) +
guides(fill = guide_colorbar(barwidth = 0.7, barheight = 6))
final_plot <-
ggarrange(plot1, plot2, plot3,
nrow = 3, ncol = 1,
align = "v",
heights = c(1, .9, 1.05),
legend = "right")
final_plot
