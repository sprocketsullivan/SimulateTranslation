for (i in 1:length(samp_size_vector)) {
selection_equiv[[i]] <- future_map(exploratory_data_summary[[i]], get_decision_equiv,
SESOI = 0.5)
}
row_names <- NULL
df <- as_tibble(matrix(unlist(exploratory_data_summary),
nrow = n_exp*length(samp_size_vector), byrow = TRUE,
dimnames = list(c(row_names),
c(col_names))))
col_name <- "selection_equiv"
dat <- bind_cols(df, df_equiv)
dat$ES_true <- rep(current_ES, 3)
col_names <- c("init_sample_size", "study_id", "t_value",
"p_value", "CI_lower", "CI_upper", "effect")
df_equiv <- as_tibble(matrix(unlist(selection_equiv),
nrow = n_exp*length(samp_size_vector), byrow = TRUE,
dimnames = list(c(row_names),
c(col_name))))
dat <- bind_cols(df, df_equiv)
dat$ES_true <- rep(current_ES, 3)
hist(dat$ES_true, breaks = 100)
selection_equiv <- list()
for (i in 1:length(samp_size_vector)) {
selection_equiv[[i]] <- future_map(exploratory_data_summary[[i]], get_decision_equiv,
SESOI = 0.5)
}
row_names <- NULL
col_names <- c("init_sample_size", "study_id", "t_value",
"p_value", "CI_lower", "CI_upper", "effect")
df <- as_tibble(matrix(unlist(exploratory_data_summary),
nrow = n_exp*length(samp_size_vector), byrow = TRUE,
dimnames = list(c(row_names),
c(col_names))))
col_name <- "selection_equiv"
df_equiv <- as_tibble(matrix(unlist(selection_equiv),
nrow = n_exp*length(samp_size_vector), byrow = TRUE,
dimnames = list(c(row_names),
c(col_name))))
dat <- bind_cols(df, df_equiv)
dat$ES_true <- rep(current_ES, 3)
hist(dat$ES_true, breaks = 100)
dat
sum(dat$effect < 0) # empirical effect sizes are negative because t.test function takes control - treat
sum(dat$effect > 0)
sum(dat$ES_true < 0)
data <-
dat %>%
group_by(init_sample_size, study_id) %>%
filter(selection_equiv == 1)
sum(data$effect < 0)
sum(data$effect > 0)
sum(data$effect == 0)
selected <-
data %>%
group_by(init_sample_size) %>%
summarize(selected = sum(selection_equiv == 1))
View(selected)
rep_sample_size_std <- NULL
for (i in 1:nrow(data)) {
# rep_sample_size_std[i] <-
#   ceiling(calc_sample_size(data = data[i, ], sample_size = data[i, ]$init_sample_size,
#                            method = 1))
rep_sample_size_std[i] <-
ceiling(calc_sample_size(data = data[i, ], sample_size = data[i, ]$init_sample_size,
method = 2, SESOI = 0.5, power = .5))
}
data$rep_samp_size_std <- rep_sample_size_std
max(data$rep_samp_size_std)
hist(data$effect, breaks = 100)
data$effect <- ifelse(data$effect < 0, -data$effect, -data$effect)
hist(data$effect, breaks = 200)
hist(data$ES_true, breaks = 200)
sum(data$effect > 0)
sum(data$effect < 0)
sum(data$effect == 0)
negative_ES <-
data %>%
group_by(init_sample_size) %>%
summarize(neg_ES = sum(effect < 0))
percent_selected <-
selected %>%
mutate(neg_ES = negative_ES$neg_ES,
selected_no_negatives = selected-neg_ES,
per_selected = selected_no_negatives / 10000 * 100)
View(percent_selected)
rep_attempts <-
rep(c(percent_selected$selected_no_negatives[1],
percent_selected$selected_no_negatives[2],
percent_selected$selected_no_negatives[3]),
c(percent_selected$selected_no_negatives[1],
percent_selected$selected_no_negatives[2],
percent_selected$selected_no_negatives[3]))
replication_data <- list()
rep_exp_no <- 0
select_experiments <- which(data$selection_equiv == 1)
select_experiments <- select_experiments[data$effect[select_experiments] >= 0 ]
current_ES_rep <- data$ES_true
for(i in select_experiments) {
rep_exp_no <- rep_exp_no + 1
replication_data[[rep_exp_no]] <-
generate_study(ES_true = current_ES_rep[i],
sample_size = rep_sample_size_std[i])
replication_data[[rep_exp_no]] <-
replication_data[[rep_exp_no]] %>%
mutate(study_id = rep_exp_no)
}
plan(multiprocess)
rep_data_summary <-
future_map(replication_data, get_summary_study_rep)
res_summary_rep <-
data.frame(init_sample_size = data$init_sample_size[select_experiments],
rep_no = c(1:rep_exp_no),
rep_sample_size = rep_sample_size_std[select_experiments],
#rep_sample_size = rep_sample_size_std,
t_value = unlist(map(rep_data_summary, "t_value")),
p_value = unlist(map(rep_data_summary, "p_value")), #[seq(1, 2*rep_exp_no, 2)],
effect = unlist(map(rep_data_summary, "effect")),
ES_true = data$ES_true[select_experiments],
rep_attempts = rep_attempts)
hist(res_summary_rep$effect, breaks = 200)
res_summary_rep$effect <- ifelse(res_summary_rep$effect < 0,
-res_summary_rep$effect, -res_summary_rep$effect)
write.csv(res_summary_rep, file = "./data/Szucs_distribution/Frequentist_analysis/Szucs_distribution_equiv_method2_0.5")
res_summary_rep <-
res_summary_rep %>%
filter(init_sample_size == 10)
ggplot(aes(y = effect, x = ES_true, col = p_value < .05),
data = res_summary_rep) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_hline(aes(yintercept = .3), color = "red") +
theme_bw()
selection_equiv <- list()
for (i in 1:length(samp_size_vector)) {
selection_equiv[[i]] <- future_map(exploratory_data_summary[[i]], get_decision_equiv,
SESOI = 0.7)
}
row_names <- NULL
col_names <- c("init_sample_size", "study_id", "t_value",
"p_value", "CI_lower", "CI_upper", "effect")
df <- as_tibble(matrix(unlist(exploratory_data_summary),
nrow = n_exp*length(samp_size_vector), byrow = TRUE,
dimnames = list(c(row_names),
c(col_names))))
col_name <- "selection_equiv"
df_equiv <- as_tibble(matrix(unlist(selection_equiv),
nrow = n_exp*length(samp_size_vector), byrow = TRUE,
dimnames = list(c(row_names),
c(col_name))))
dat <- bind_cols(df, df_equiv)
dat$ES_true <- rep(current_ES, 3)
hist(dat$ES_true, breaks = 100)
dat
sum(dat$effect < 0) # empirical effect sizes are negative because t.test function takes control - treat
sum(dat$effect > 0)
sum(dat$ES_true < 0)
data <-
dat %>%
group_by(init_sample_size, study_id) %>%
filter(selection_equiv == 1)
sum(data$effect < 0)
sum(data$effect > 0)
sum(data$effect == 0)
selected <-
data %>%
group_by(init_sample_size) %>%
summarize(selected = sum(selection_equiv == 1))
rep_sample_size_std <- NULL
for (i in 1:nrow(data)) {
# rep_sample_size_std[i] <-
#   ceiling(calc_sample_size(data = data[i, ], sample_size = data[i, ]$init_sample_size,
#                            method = 1))
rep_sample_size_std[i] <-
ceiling(calc_sample_size(data = data[i, ], sample_size = data[i, ]$init_sample_size,
method = 2, SESOI = 0.7, power = .5))
}
data$rep_samp_size_std <- rep_sample_size_std
max(data$rep_samp_size_std)
hist(data$effect, breaks = 100)
data$effect <- ifelse(data$effect < 0, -data$effect, -data$effect)
hist(data$effect, breaks = 200)
hist(data$ES_true, breaks = 200)
sum(data$effect > 0)
sum(data$effect < 0)
sum(data$effect == 0)
negative_ES <-
data %>%
group_by(init_sample_size) %>%
summarize(neg_ES = sum(effect < 0))
percent_selected <-
selected %>%
mutate(neg_ES = negative_ES$neg_ES,
selected_no_negatives = selected-neg_ES,
per_selected = selected_no_negatives / 10000 * 100)
View(percent_selected)
rep_attempts <-
rep(c(percent_selected$selected_no_negatives[1],
percent_selected$selected_no_negatives[2],
percent_selected$selected_no_negatives[3]),
c(percent_selected$selected_no_negatives[1],
percent_selected$selected_no_negatives[2],
percent_selected$selected_no_negatives[3]))
replication_data <- list()
rep_exp_no <- 0
select_experiments <- which(data$selection_equiv == 1)
select_experiments <- select_experiments[data$effect[select_experiments] >= 0 ]
current_ES_rep <- data$ES_true
for(i in select_experiments) {
rep_exp_no <- rep_exp_no + 1
replication_data[[rep_exp_no]] <-
generate_study(ES_true = current_ES_rep[i],
sample_size = rep_sample_size_std[i])
replication_data[[rep_exp_no]] <-
replication_data[[rep_exp_no]] %>%
mutate(study_id = rep_exp_no)
}
plan(multiprocess)
rep_data_summary <-
future_map(replication_data, get_summary_study_rep)
res_summary_rep <-
data.frame(init_sample_size = data$init_sample_size[select_experiments],
rep_no = c(1:rep_exp_no),
rep_sample_size = rep_sample_size_std[select_experiments],
#rep_sample_size = rep_sample_size_std,
t_value = unlist(map(rep_data_summary, "t_value")),
p_value = unlist(map(rep_data_summary, "p_value")), #[seq(1, 2*rep_exp_no, 2)],
effect = unlist(map(rep_data_summary, "effect")),
ES_true = data$ES_true[select_experiments],
rep_attempts = rep_attempts)
hist(res_summary_rep$effect, breaks = 200)
res_summary_rep$effect <- ifelse(res_summary_rep$effect < 0,
-res_summary_rep$effect, -res_summary_rep$effect)
write.csv(res_summary_rep, file = "./data/Szucs_distribution/Frequentist_analysis/Szucs_distribution_equiv_method2_0.7")
res_summary_rep <-
res_summary_rep %>%
filter(init_sample_size == 10)
ggplot(aes(y = effect, x = ES_true, col = p_value < .05),
data = res_summary_rep) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_hline(aes(yintercept = .3), color = "red") +
theme_bw()
selection_equiv <- list()
for (i in 1:length(samp_size_vector)) {
selection_equiv[[i]] <- future_map(exploratory_data_summary[[i]], get_decision_equiv,
SESOI = 1.0)
}
row_names <- NULL
col_names <- c("init_sample_size", "study_id", "t_value",
"p_value", "CI_lower", "CI_upper", "effect")
df <- as_tibble(matrix(unlist(exploratory_data_summary),
nrow = n_exp*length(samp_size_vector), byrow = TRUE,
dimnames = list(c(row_names),
c(col_names))))
col_name <- "selection_equiv"
df_equiv <- as_tibble(matrix(unlist(selection_equiv),
nrow = n_exp*length(samp_size_vector), byrow = TRUE,
dimnames = list(c(row_names),
c(col_name))))
dat <- bind_cols(df, df_equiv)
dat$ES_true <- rep(current_ES, 3)
hist(dat$ES_true, breaks = 100)
dat
sum(dat$effect < 0) # empirical effect sizes are negative because t.test function takes control - treat
sum(dat$effect > 0)
sum(dat$ES_true < 0)
data <-
dat %>%
group_by(init_sample_size, study_id) %>%
filter(selection_equiv == 1)
sum(data$effect < 0)
sum(data$effect > 0)
sum(data$effect == 0)
selected <-
data %>%
group_by(init_sample_size) %>%
summarize(selected = sum(selection_equiv == 1))
rep_sample_size_std <- NULL
for (i in 1:nrow(data)) {
# rep_sample_size_std[i] <-
#   ceiling(calc_sample_size(data = data[i, ], sample_size = data[i, ]$init_sample_size,
#                            method = 1))
rep_sample_size_std[i] <-
ceiling(calc_sample_size(data = data[i, ], sample_size = data[i, ]$init_sample_size,
method = 2, SESOI = 1.0, power = .5))
}
data$rep_samp_size_std <- rep_sample_size_std
max(data$rep_samp_size_std)
hist(data$effect, breaks = 100)
data$effect <- ifelse(data$effect < 0, -data$effect, -data$effect)
hist(data$effect, breaks = 200)
hist(data$ES_true, breaks = 200)
sum(data$effect > 0)
sum(data$effect < 0)
sum(data$effect == 0)
negative_ES <-
data %>%
group_by(init_sample_size) %>%
summarize(neg_ES = sum(effect < 0))
percent_selected <-
selected %>%
mutate(neg_ES = negative_ES$neg_ES,
selected_no_negatives = selected-neg_ES,
per_selected = selected_no_negatives / 10000 * 100)
View(percent_selected)
rep_attempts <-
rep(c(percent_selected$selected_no_negatives[1],
percent_selected$selected_no_negatives[2],
percent_selected$selected_no_negatives[3]),
c(percent_selected$selected_no_negatives[1],
percent_selected$selected_no_negatives[2],
percent_selected$selected_no_negatives[3]))
replication_data <- list()
rep_exp_no <- 0
select_experiments <- which(data$selection_equiv == 1)
select_experiments <- select_experiments[data$effect[select_experiments] >= 0 ]
current_ES_rep <- data$ES_true
for(i in select_experiments) {
rep_exp_no <- rep_exp_no + 1
replication_data[[rep_exp_no]] <-
generate_study(ES_true = current_ES_rep[i],
sample_size = rep_sample_size_std[i])
replication_data[[rep_exp_no]] <-
replication_data[[rep_exp_no]] %>%
mutate(study_id = rep_exp_no)
}
plan(multiprocess)
rep_data_summary <-
future_map(replication_data, get_summary_study_rep)
res_summary_rep <-
data.frame(init_sample_size = data$init_sample_size[select_experiments],
rep_no = c(1:rep_exp_no),
rep_sample_size = rep_sample_size_std[select_experiments],
#rep_sample_size = rep_sample_size_std,
t_value = unlist(map(rep_data_summary, "t_value")),
p_value = unlist(map(rep_data_summary, "p_value")), #[seq(1, 2*rep_exp_no, 2)],
effect = unlist(map(rep_data_summary, "effect")),
ES_true = data$ES_true[select_experiments],
rep_attempts = rep_attempts)
hist(res_summary_rep$effect, breaks = 200)
res_summary_rep$effect <- ifelse(res_summary_rep$effect < 0,
-res_summary_rep$effect, -res_summary_rep$effect)
hist(res_summary_rep$effect, breaks = 200)
write.csv(res_summary_rep, file = "./data/Szucs_distribution/Frequentist_analysis/Szucs_distribution_equiv_method2_1.0")
res_summary_rep <-
res_summary_rep %>%
filter(init_sample_size == 10)
ggplot(aes(y = effect, x = ES_true, col = p_value < .05),
data = res_summary_rep) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_hline(aes(yintercept = .3), color = "red") +
theme_bw()
exploratory_data_Carneiro_10_1.0 <-
exploratory_data_Carneiro_10 %>%
filter(SESOI == 0.7) %>%
filter(selection_equiv == 1) %>%
filter(effect < 0)
knitr::opts_chunk$set(echo = TRUE)
library(bookdown)
library(bookdown)
library(knitr)
load("all_outcomes_init_samp_size_10.RData")
load("exploratory_data_SESOI_Carneiro_10.RData")
load("exploratory_data_SESOI_Szucs_10.RData")
load("exploratory_data_significance_Carneiro_10.RData")
load("exploratory_data_significance_Szucs_10.RData")
exploratory_data_Carneiro_10_1.0 <-
exploratory_data_Carneiro_10 %>%
filter(SESOI == 0.5) %>%
filter(selection_equiv == 1)
exploratory_data_Carneiro_10_1.0
exploratory_data_Carneiro_10_1.0 <-
exploratory_data_Carneiro_10 %>%
filter(SESOI == "1.0") %>%
filter(selection_equiv == 1)
exploratory_data_Carneiro_10_1.0 <-
exploratory_data_Carneiro_10 %>%
filter(SESOI == "1.0") %>%
filter(selection_equiv == 1) %>%
summarise(N = n())
View(exploratory_data_Carneiro_10_1.0)
exploratory_data_Carneiro_10_0.5 <-
exploratory_data_Carneiro_10 %>%
filter(SESOI == 0.5) %>%
filter(selection_equiv == 1) %>%
View(exploratory_data_Carneiro_10_1.0)
View(exploratory_data_Carneiro_10_1.0)
exploratory_data_Carneiro_10_0.5 <-
exploratory_data_Carneiro_10 %>%
filter(SESOI == 0.5) %>%
filter(selection_equiv == 1) %>%
exploratory_data_Carneiro_10_0.5 <-
exploratory_data_Carneiro_10 %>%
filter(SESOI == 0.5) %>%
filter(selection_equiv == 1) %>%
summarise(N = n())
exploratory_data_Carneiro_10_0.5 <-
exploratory_data_Carneiro_10 %>%
filter(SESOI == 0.5) %>%
filter(selection_equiv == 1) %>%
summarise(N = n())
View(exploratory_data_Carneiro_10_1.0)
View(exploratory_data_Carneiro_10_0.5)
exploratory_data_sig_Carneiro_10_0.05 <-
exploratory_data_sig_Carneiro_10 %>%
filter(pval_threshold == 0.05) %>%
filter(slection_sig == 1) %>%
summarise(N = n())
exploratory_data_sig_Carneiro_10_0.05 <-
exploratory_data_sig_Carneiro_10 %>%
filter(pval_threshold == 0.05) %>%
filter(selection_sig == 1) %>%
summarise(N = n())
View(exploratory_data_sig_Carneiro_10_0.05)
exploratory_data_sig_Carneiro_10_0.05$N
exploratory_data_sig_Carneiro_10_0.05$N / 100
exploratory_data_sig_Carneiro_10_0.05 <-
exploratory_data_sig_Carneiro_10 %>%
filter(pval_threshold == 0.05) %>%
filter(selection_sig == 1) %>%
filter(effect < 0) %>%
summarise(N = n())
exploratory_data_sig_Carneiro_10_0.05$N / 100
exploratory_data_Carneiro_10_0.5 <-
exploratory_data_Carneiro_10 %>%
filter(SESOI == 0.5) %>%
filter(selection_equiv == 1) %>%
filter(effect < 0) %>%
summarise(N = n())
exploratory_data_Carneiro_10_0.5 / 100
exploratory_data_Carneiro_10_0.5$N / 100
exploratory_data_Carneiro_10_1.0$N / 100
exploratory_data_Szucs_10_1.0 <-
exploratory_data_Szucs_10 %>%
filter(SESOI == "1.0") %>%
filter(selection_equiv == 1) %>%
summarise(N = n())
exploratory_data_Szucs_10_1.0$N / 100
exploratory_data_Szucs_10_0.5 <-
exploratory_data_Szucs_10 %>%
filter(SESOI == 0.5) %>%
filter(selection_equiv == 1) %>%
filter(effect < 0) %>%
summarise(N = n())
exploratory_data_Szucs_10_0.5$N / 100
exploratory_data_Szucs_10_0.5 <-
exploratory_data_Szucs_10 %>%
filter(SESOI == 0.5) %>%
filter(selection_equiv == 1) %>%
# filter(effect < 0) %>%
summarise(N = n())
exploratory_data_Szucs_10_0.5$N / 100
exploratory_data_sig_Szucs_10_0.05 <-
exploratory_data_sig_Szucs_10 %>%
filter(pval_threshold == 0.05) %>%
filter(selection_sig == 1) %>%
# filter(effect < 0) %>%
summarise(N = n())
exploratory_data_sig_Szucs_10_0.05$N / 100
exploratory_data_sig_Szucs_10_0.05 <-
exploratory_data_sig_Szucs_10 %>%
filter(pval_threshold == 0.05) %>%
filter(selection_sig == 1) %>%
filter(effect < 0) %>%
summarise(N = n())
exploratory_data_sig_Szucs_10_0.05$N / 100
exploratory_data_sig_Carneiro_10_0.05 <-
exploratory_data_sig_Carneiro_10 %>%
filter(pval_threshold == 0.05) %>%
filter(selection_sig == 1) %>%
#filter(effect < 0) %>%
summarise(N = n())
exploratory_data_sig_Carneiro_10_0.05$N / 100
exploratory_data_Carneiro_10_0.5 <-
exploratory_data_Carneiro_10 %>%
filter(SESOI == 0.5) %>%
filter(selection_equiv == 1) %>%
# filter(effect < 0) %>%
summarise(N = n())
exploratory_data_Carneiro_10_0.5$N / 100
exploratory_data_Carneiro_10_1.0 <-
exploratory_data_Carneiro_10 %>%
filter(SESOI == "1.0") %>%
filter(selection_equiv == 1) %>%
summarise(N = n())
exploratory_data_Carneiro_10_1.0$N / 100
exploratory_data_sig_Szucs_10_0.05 <-
exploratory_data_sig_Szucs_10 %>%
filter(pval_threshold == 0.05) %>%
filter(selection_sig == 1) %>%
# filter(effect < 0) %>%
summarise(N = n())
exploratory_data_sig_Szucs_10_0.05$N / 100
exploratory_data_Szucs_10_0.5 <-
exploratory_data_Szucs_10 %>%
filter(SESOI == 0.5) %>%
filter(selection_equiv == 1) %>%
# filter(effect < 0) %>%
summarise(N = n())
exploratory_data_Szucs_10_0.5$N / 100
exploratory_data_Szucs_10_1.0 <-
exploratory_data_Szucs_10 %>%
filter(SESOI == "1.0") %>%
filter(selection_equiv == 1) %>%
summarise(N = n())
exploratory_data_Szucs_10_1.0$N / 100
exploratory_data_sig_Szucs_10_0.05$N / 100
exploratory_data_sig_Carneiro_10_0.05$N / 100
exploratory_data_Szucs_10_0.5$N / 100
exploratory_data_Szucs_10_1.0$N / 100
exploratory_data_Carneiro_10_1.0$N / 100
