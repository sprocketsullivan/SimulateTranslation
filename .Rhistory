registerDoParallel()
getDoParWorkers()
n_exp <- 10000
ES_true <- ES_data_Carneiro$ES_d
hist(ES_true, breaks = 200)
sum(ES_true < 0)
sum(ES_true > 0)
sum(ES_true == 0)
ES_true <- ifelse(ES_true < 0, -ES_true, -ES_true)
sum(ES_true > 0)
sum(ES_true < 0)
sum(ES_true == 0)
hist(ES_true, breaks = 200)
median(ES_true)
mean(ES_true)
set.seed(4321)
current_ES <- sample(ES_true, n_exp, replace = TRUE)
hist(current_ES, breaks = 200)
median(current_ES)
mean(current_ES)
sum(current_ES > 0)
sum(current_ES < 0)
sum(current_ES == 0)
#how many hypothesis over SESOI threshold
SESOI <- c(.5, 1)
mat <- matrix(NA, nrow = 3, ncol = length(SESOI),
dimnames = list(c("prev_pop", "all_positives", "all_negatives"),
c(.5, 1)))
prev_pop      <- vector()
all_positives <- vector()
all_negatives <- vector()
counter = 0
for (ES in SESOI) {
counter = counter + 1
prev <- round(sum(ES_true > ES)/length(ES_true), 3)
all_pos <- sum(current_ES > ES)
all_neg <- n_exp - all_pos
print(ES)
prev_pop[counter] <- prev
all_positives[counter] <- all_pos
all_negatives[counter] <- all_neg
}
mat[1, ] <- prev_pop
mat[2, ] <- all_positives
mat[3, ] <- all_negatives
mat
samp_size_vector <- c(7, 10, 15)
list_exploratory_data <-
foreach(samp_size = samp_size_vector) %do% {
exploratory_data <- list()
for(i in 1:n_exp) {
exploratory_data[[i]] <- generate_study(current_ES[i])
exploratory_data[[i]] <-
exploratory_data[[i]] %>%
mutate(study_id = i,
ES_true = current_ES[i])
}
list_exploratory_data <- exploratory_data
}
# the confidence interval generated here is used in the equivalence test
exploratory_data_summary <- list()
plan(multiprocess)
for (i in 1:length(samp_size_vector)) {
exploratory_data_summary[[i]] <-
future_map(list_exploratory_data[[i]], get_summary_study)
}
# decision to go on
# this decision depends on whether exploratory result is significant (p <= .05) or not
# select studies for replication if p-value < .05
selection_sig <- list()
for (i in 1:length(samp_size_vector)) {
selection_sig[[i]] <-
future_map(exploratory_data_summary[[i]], get_decision_sig, pval_threshold = 0.05)
}
row_names <- NULL
col_names <- c("init_sample_size", "study_id", "t_value",
"p_value", "CI_lower", "CI_upper", "effect")
df <- as_tibble(matrix(unlist(exploratory_data_summary),
nrow = n_exp*length(samp_size_vector), byrow = TRUE,
dimnames = list(c(row_names),
c(col_names))))
col_name <- "selection_sig"
df_sig <- as_tibble(matrix(unlist(selection_sig),
nrow = n_exp*length(samp_size_vector), byrow = TRUE,
dimnames = list(c(row_names),
c(col_name))))
dat <- bind_cols(df, df_sig)
dat$ES_true <- current_ES
dat <-
dat %>%
filter(init_sample_size == 10)
dat_large_ES <-
dat %>%
filter(ES_true > 0)
dat_large_ES <-
dat %>%
filter(ES_true > 0)
dat_selected <-
dat_large_ES %>%
filter(selection_sig == 1)
View(dat_selected)
3169/6844*100
setwd("~/Documents/QUEST/PhD/R/SimulateTranslation/Manuscript")
1/8
1/0.125
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
options(tinytex.verbose = TRUE)
tinytex::reinstall_tinytex()
tlmgr update --self
install.packages('tinytex')
install.packages("tinytex")
tinytex::tlmgr_update()
tinytex::parse_packages()
update.packages(ask = FALSE, checkBuilt = TRUE)
tinytex::tlmgr_update()
tinytex::reinstall_tinytex()
options(tinytex.verbose = TRUE)
install.packages('tinytex')
install.packages("tinytex")
Sys.which('pdflatex')
Sys.which('xelatex')
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::install_tinytex()
tinytex::install_tinytex(force = TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(bookdown)
library(knitr)
library(pwr)
library(tidyverse)
load("effect_sizes_with_CI_after_replication.RData")
# filter all effects > 5 in T1 (standard trajectory)
T1_data <-
final_init_samp_size_10 %>%
filter(trajectory == "T1") %>%
filter(effect < 5)
mean_N <-
T1_data %>%
group_by(distribution) %>%
summarize(mean_N = mean(rep_sample_size))
ceiling(mean(T1_data$rep_sample_size))
powered_d_50 <-
pwr.t.test(n = ceiling(mean(T1_data$rep_sample_size)),
d = NULL, sig.level = .05, power = .5,
type = "two.sample",
alternative = "greater")$d
powered_d_80 <-
pwr.t.test(n = ceiling(mean(T1_data$rep_sample_size)),
d = NULL, sig.level = .05, power = .8,
type = "two.sample",
alternative = "greater")$d
powered_d_80 <-
pwr.t.test(n = ceiling(mean(T1_data$rep_sample_size)),
d = NULL, sig.level = .05, power = .8,
type = "two.sample",
alternative = "greater")$d
```{r plot_effects_powered_at_50, echo = FALSE, message = FALSE, out.width = "80%", fig.align = 'center'}
ggplot(data = T1_data,
aes(x = distribution, y = effect)) +
# facet_wrap(~ distribution) +
geom_violin(position = position_dodge(width = 0.9)) +
geom_rect(fill = "lightgrey", alpha = .01,
aes(xmin = -Inf, xmax = Inf,
ymin = powered_d_50, ymax = Inf)) +
# geom_rect(fill = "lightgrey", alpha = .01,
#           aes(xmin = -Inf, xmax = Inf,
#               ymin = powered_d_50, ymax = powered_d_80)) +
labs(x = "Distribution",
y = expression(paste("Effect sizes (Cohen's ", italic("d"), ") "))) +
theme_bw() +
theme(axis.title.x = element_text(size = 14)) +
theme(axis.title.y = element_text(size = 14)) +
theme(axis.text.x = element_text(size = 12, colour = "black")) +
theme(axis.text.y = element_text(size = 12, colour = "black"))
ggplot(data = T1_data,
aes(x = distribution, y = effect)) +
# facet_wrap(~ distribution) +
geom_violin(position = position_dodge(width = 0.9)) +
# geom_rect(fill = "lightgrey", alpha = .01,
#           aes(xmin = -Inf, xmax = Inf,
#               ymin = powered_d_50, ymax = Inf)) +
geom_rect(fill = "lightgrey", alpha = .01,
aes(xmin = -Inf, xmax = Inf,
ymin = powered_d_80, ymax = Inf)) +
labs(x = "Distribution",
y = expression(paste("Effect sizes (Cohen's ", italic("d"), ") "))) +
theme_bw() +
theme(axis.title.x = element_text(size = 14)) +
theme(axis.title.y = element_text(size = 14)) +
theme(axis.text.x = element_text(size = 12, colour = "black")) +
theme(axis.text.y = element_text(size = 12, colour = "black"))
knitr::opts_chunk$set(echo = TRUE)
library(bookdown)
library(knitr)
library(pwr)
library(tidyverse)
library(bookdown)
library(knitr)
library(pwr)
library(tidyverse)
# PPV for all trajectories and SESOI
Pessimistic scenario (Carneiro distribution)
```{r data_Carneiro, include = FALSE, cache = FALSE}
outcomes <- load("outcomes_Carneiro_all_trajectories.RData")
outcomes <- load("outcomes_Carneiro_all_trajectories.RData")
```{r, PPVplot_Carneiro, echo = FALSE, out.width = "100%", fig.align = 'center'}
facet_names <-
c("0.3" = "SESOI = 0.3",
"0.5" = "SESOI = 0.5",
"0.7" = "SESOI = 0.7",
"1" = "SESOI = 1.0")
plot_PPV <-
ggplot(data = outcomes_10EU,
aes(x = trajectory, y = PPV_pop_prev)) +
geom_point(size = 3) +
facet_wrap(~ SESOI, nrow = 1, ncol = 4,  labeller = labeller(.rows = facet_names)) +
labs(x = "Trajectory", y = "Positive predictive value") +
scale_x_discrete(labels = c("SESOI within CI \nSESOI",
"Significance \nSESOI",
"SESOI within CI \nStandard",
"Significance \nStandard")) +
theme_bw() +
theme(axis.title.x = element_text(size = 35)) +
theme(axis.title.y = element_text(size = 35)) +
theme(axis.text.x = element_text(size = 28, colour = "black")) +
theme(axis.text.y = element_text(size = 28, colour = "black")) +
theme(strip.text.x = element_text(size = 25, colour = "black", face = "bold")) +
theme(strip.text.y = element_text(size = 25, colour = "black", face = "bold")) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(legend.title = element_text(size = 15, face = "bold")) +
theme(legend.text = element_text(size = 14))
hlines <- data.frame(pre_study_odds = c(outcomes_10EU$Prevalence[1], outcomes_10EU$Prevalence[5],
outcomes_10EU$Prevalence[9], outcomes_10EU$Prevalence[13]),
# distribution   = c(rep(plot_data$distribution[1], 2),
#                    rep(plot_data$distribution[5], 2)),
SESOI          = rep(c("1", "0.7", "0.5", "0.3")))
plot_PPV <-
plot_PPV +
geom_hline(data = hlines,
aes(yintercept = pre_study_odds),
color = "red", lty = 2, size = .5)
plot_PPV
plot_PPV
```{r, PPVplot_Carneiro, echo = FALSE, fig.width = 10,out.width = "75%", fig.align = 'center'}
facet_names <-
c("0.3" = "SESOI = 0.3",
"0.5" = "SESOI = 0.5",
"0.7" = "SESOI = 0.7",
"1" = "SESOI = 1.0")
plot_PPV <-
ggplot(data = outcomes_10EU,
aes(x = trajectory, y = PPV_pop_prev)) +
geom_point(size = 3) +
facet_wrap(~ SESOI, nrow = 1, ncol = 4,  labeller = labeller(.rows = facet_names)) +
labs(x = "Trajectory", y = "Positive predictive value") +
scale_x_discrete(labels = c("SESOI within CI \nSESOI",
"Significance \nSESOI",
"SESOI within CI \nStandard",
"Significance \nStandard")) +
theme_bw() +
theme(axis.title.x = element_text(size = 35)) +
theme(axis.title.y = element_text(size = 35)) +
theme(axis.text.x = element_text(size = 28, colour = "black")) +
theme(axis.text.y = element_text(size = 28, colour = "black")) +
theme(strip.text.x = element_text(size = 25, colour = "black", face = "bold")) +
theme(strip.text.y = element_text(size = 25, colour = "black", face = "bold")) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(legend.title = element_text(size = 15, face = "bold")) +
theme(legend.text = element_text(size = 14))
hlines <- data.frame(pre_study_odds = c(outcomes_10EU$Prevalence[1], outcomes_10EU$Prevalence[5],
outcomes_10EU$Prevalence[9], outcomes_10EU$Prevalence[13]),
# distribution   = c(rep(plot_data$distribution[1], 2),
#                    rep(plot_data$distribution[5], 2)),
SESOI          = rep(c("1", "0.7", "0.5", "0.3")))
plot_PPV <-
plot_PPV +
geom_hline(data = hlines,
aes(yintercept = pre_study_odds),
color = "red", lty = 2, size = .5)
plot_PPV
```{r, PPVplot_Carneiro, echo = FALSE, fig.width = 20,out.width = "75%", fig.align = 'center'}
facet_names <-
c("0.3" = "SESOI = 0.3",
"0.5" = "SESOI = 0.5",
"0.7" = "SESOI = 0.7",
"1" = "SESOI = 1.0")
plot_PPV <-
ggplot(data = outcomes_10EU,
aes(x = trajectory, y = PPV_pop_prev)) +
geom_point(size = 3) +
facet_wrap(~ SESOI, nrow = 1, ncol = 4,  labeller = labeller(.rows = facet_names)) +
labs(x = "Trajectory", y = "Positive predictive value") +
scale_x_discrete(labels = c("SESOI within CI \nSESOI",
"Significance \nSESOI",
"SESOI within CI \nStandard",
"Significance \nStandard")) +
theme_bw() +
theme(axis.title.x = element_text(size = 35)) +
theme(axis.title.y = element_text(size = 35)) +
theme(axis.text.x = element_text(size = 28, colour = "black")) +
theme(axis.text.y = element_text(size = 28, colour = "black")) +
theme(strip.text.x = element_text(size = 25, colour = "black", face = "bold")) +
theme(strip.text.y = element_text(size = 25, colour = "black", face = "bold")) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(legend.title = element_text(size = 15, face = "bold")) +
theme(legend.text = element_text(size = 14))
plot_PPV <-
plot_PPV +
geom_hline(data = hlines,
aes(yintercept = pre_study_odds),
color = "red", lty = 2, size = .5)
plot_PPV
facet_names <-
c("0.3" = "SESOI = 0.3",
"0.5" = "SESOI = 0.5",
"0.7" = "SESOI = 0.7",
"1" = "SESOI = 1.0")
plot_PPV <-
ggplot(data = outcomes_10EU,
aes(x = trajectory, y = PPV_pop_prev)) +
geom_point(size = 3) +
facet_wrap(~ SESOI, nrow = 1, ncol = 4,  labeller = labeller(.rows = facet_names)) +
labs(x = "Trajectory", y = "Positive predictive value") +
scale_x_discrete(labels = c("SESOI within CI \nSESOI",
"Significance \nSESOI",
"SESOI within CI \nStandard",
"Significance \nStandard")) +
theme_bw() +
theme(axis.title.x = element_text(size = 35)) +
theme(axis.title.y = element_text(size = 35)) +
theme(axis.text.x = element_text(size = 28, colour = "black")) +
theme(axis.text.y = element_text(size = 28, colour = "black")) +
theme(strip.text.x = element_text(size = 25, colour = "black", face = "bold")) +
theme(strip.text.y = element_text(size = 25, colour = "black", face = "bold")) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(legend.title = element_text(size = 15, face = "bold")) +
theme(legend.text = element_text(size = 14))
hlines <- data.frame(pre_study_odds = c(outcomes_10EU$Prevalence[1], outcomes_10EU$Prevalence[5],
outcomes_10EU$Prevalence[9], outcomes_10EU$Prevalence[13]),
# distribution   = c(rep(plot_data$distribution[1], 2),
#                    rep(plot_data$distribution[5], 2)),
SESOI          = rep(c("1", "0.7", "0.5", "0.3")))
plot_PPV <-
plot_PPV +
geom_hline(data = hlines,
aes(yintercept = pre_study_odds),
color = "red", lty = 2, size = .5)
plot_PPV
facet_names <-
c("0.3" = "SESOI = 0.3",
"0.5" = "SESOI = 0.5",
"0.7" = "SESOI = 0.7",
"1" = "SESOI = 1.0")
plot_PPV <-
ggplot(data = outcomes_10EU,
aes(x = trajectory, y = PPV_pop_prev)) +
geom_point(size = 3) +
facet_wrap(~ SESOI, nrow = 1, ncol = 4,  labeller = labeller(.rows = facet_names)) +
labs(x = "Trajectory", y = "Positive predictive value") +
scale_x_discrete(labels = c("SESOI within CI \nSESOI",
"Significance \nSESOI",
"SESOI within CI \nStandard",
"Significance \nStandard")) +
theme_bw() +
theme(axis.title.x = element_text(size = 35)) +
theme(axis.title.y = element_text(size = 35)) +
theme(axis.text.x = element_text(size = 28, colour = "black")) +
theme(axis.text.y = element_text(size = 28, colour = "black")) +
theme(strip.text.x = element_text(size = 25, colour = "black", face = "bold")) +
theme(strip.text.y = element_text(size = 25, colour = "black", face = "bold")) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(legend.title = element_text(size = 15, face = "bold")) +
theme(legend.text = element_text(size = 14))
plot_PPV <-
plot_PPV +
geom_hline(data = hlines,
aes(yintercept = pre_study_odds),
color = "red", lty = 2, size = .5)
plot_PPV
facet_names <-
c("0.3" = "SESOI = 0.3",
"0.5" = "SESOI = 0.5",
"0.7" = "SESOI = 0.7",
"1" = "SESOI = 1.0")
plot_PPV <-
ggplot(data = outcomes_10EU,
aes(x = trajectory, y = PPV_pop_prev)) +
geom_point(size = 3) +
facet_wrap(~ SESOI, nrow = 1, ncol = 4,  labeller = labeller(.rows = facet_names)) +
labs(x = "Trajectory", y = "Positive predictive value") +
scale_x_discrete(labels = c("SESOI within CI \nSESOI",
"Significance \nSESOI",
"SESOI within CI \nStandard",
"Significance \nStandard")) +
theme_bw() +
theme(axis.title.x = element_text(size = 35)) +
theme(axis.title.y = element_text(size = 35)) +
theme(axis.text.x = element_text(size = 28, colour = "black")) +
theme(axis.text.y = element_text(size = 28, colour = "black")) +
theme(strip.text.x = element_text(size = 25, colour = "black", face = "bold")) +
theme(strip.text.y = element_text(size = 25, colour = "black", face = "bold")) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(legend.title = element_text(size = 15, face = "bold")) +
theme(legend.text = element_text(size = 14))
hlines <- data.frame(pre_study_odds = c(outcomes_10EU$Prevalence[1], outcomes_10EU$Prevalence[5],
outcomes_10EU$Prevalence[9], outcomes_10EU$Prevalence[13]),
# distribution   = c(rep(plot_data$distribution[1], 2),
#                    rep(plot_data$distribution[5], 2)),
SESOI          = rep(c("1", "0.7", "0.5", "0.3")))
plot_PPV <-
plot_PPV +
geom_hline(data = hlines,
aes(yintercept = pre_study_odds),
color = "red", lty = 2, size = .5)
plot_PPV
setwd("~/Documents/QUEST/PhD/R/SimulateTranslation")
rm(list = ls())
library(pwr)
library(tidyverse)
outcomes <- read.csv(file = "./data/Carneiro_distribution/Frequentist_analysis/Carneiro_distribution_outcomes_all_SESOI_combined")
outcomes$trajectory <- interaction(outcomes$decision_crit, outcomes$sampsize_approach)
outcomes_10EU <-
outcomes %>%
filter(init_sample_size == 10)
facet_names <-
c("0.3" = "SESOI = 0.3",
"0.5" = "SESOI = 0.5",
"0.7" = "SESOI = 0.7",
"1" = "SESOI = 1.0")
plot_PPV <-
ggplot(data = outcomes_10EU,
aes(x = trajectory, y = PPV_pop_prev)) +
geom_point() +
facet_wrap(~ SESOI, nrow = 1, ncol = 4,  labeller = labeller(.rows = facet_names)) +
labs(x = "Trajectory", y = "Positive predictive value") +
scale_x_discrete(labels = c("SESOI within CI \nSESOI",
"Significance \nSESOI",
"SESOI within CI \nStandard",
"Significance \nStandard")) +
theme_bw() +
theme(axis.title.x = element_text(size = 14)) +
theme(axis.title.y = element_text(size = 14)) +
theme(axis.text.x = element_text(size = 12, colour = "black")) +
theme(axis.text.y = element_text(size = 12, colour = "black")) +
theme(strip.text.x = element_text(size = 15, colour = "black", face = "bold")) +
theme(strip.text.y = element_text(size = 15, colour = "black", face = "bold")) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(legend.title = element_text(size = 15, face = "bold")) +
theme(legend.text = element_text(size = 14))
hlines <- data.frame(pre_study_odds = c(outcomes_10EU$Prevalence[1], outcomes_10EU$Prevalence[5],
outcomes_10EU$Prevalence[9], outcomes_10EU$Prevalence[13]),
# distribution   = c(rep(plot_data$distribution[1], 2),
#                    rep(plot_data$distribution[5], 2)),
SESOI          = rep(c("1", "0.7", "0.5", "0.3")))
plot_PPV <-
plot_PPV +
geom_hline(data = hlines,
aes(yintercept = pre_study_odds),
color = "red", lty = 2, size = .5)
plot_PPV
plot_PPV <-
ggplot(data = outcomes_10EU,
aes(x = trajectory, y = PPV_pop_prev)) +
geom_point() +
facet_wrap(~ SESOI, nrow = 2, ncol = 2,  labeller = labeller(.rows = facet_names)) +
labs(x = "Trajectory", y = "Positive predictive value") +
scale_x_discrete(labels = c("SESOI within CI \nSESOI",
"Significance \nSESOI",
"SESOI within CI \nStandard",
"Significance \nStandard")) +
theme_bw() +
theme(axis.title.x = element_text(size = 14)) +
theme(axis.title.y = element_text(size = 14)) +
theme(axis.text.x = element_text(size = 12, colour = "black")) +
theme(axis.text.y = element_text(size = 12, colour = "black")) +
theme(strip.text.x = element_text(size = 15, colour = "black", face = "bold")) +
theme(strip.text.y = element_text(size = 15, colour = "black", face = "bold")) +
theme(strip.background = element_rect(fill = "white", color = "black")) +
theme(legend.title = element_text(size = 15, face = "bold")) +
theme(legend.text = element_text(size = 14))
hlines <- data.frame(pre_study_odds = c(outcomes_10EU$Prevalence[1], outcomes_10EU$Prevalence[5],
outcomes_10EU$Prevalence[9], outcomes_10EU$Prevalence[13]),
# distribution   = c(rep(plot_data$distribution[1], 2),
#                    rep(plot_data$distribution[5], 2)),
SESOI          = rep(c("1", "0.7", "0.5", "0.3")))
plot_PPV <-
plot_PPV +
geom_hline(data = hlines,
aes(yintercept = pre_study_odds),
color = "red", lty = 2, size = .5)
plot_PPV
plot_PPV <-
ggplot(data = outcomes_10EU,
aes(x = trajectory, y = PPV_pop_prev)) +
geom_point(size = 2) +
facet_wrap(~ SESOI, nrow = 2, ncol = 2,  labeller = labeller(.rows = facet_names)) +
labs(x = "Trajectory", y = "Positive predictive value") +
scale_x_discrete(labels = c("SESOI within CI \nSESOI",
"Significance \nSESOI",
"SESOI within CI \nStandard",
"Significance \nStandard")) +
theme_bw() +
theme(axis.title.x = element_text(size = 13)) +
theme(axis.title.y = element_text(size = 13)) +
theme(axis.text.x = element_text(size = 7.5, colour = "black")) +
theme(axis.text.y = element_text(size = 10, colour = "black")) +
theme(strip.text.x = element_text(size = 13, colour = "black", face = "bold")) +
theme(strip.text.y = element_text(size = 13, colour = "black", face = "bold")) +
theme(strip.background = element_rect(fill = "white", color = "black"))
