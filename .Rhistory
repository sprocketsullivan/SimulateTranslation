facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_vline(aes(xintercept = 1), color = "red") +
theme_bw()
ggplot(aes(y = mean_effect, x = ES_true, color = BF > 10),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_vline(aes(xintercept = 1), color = "red") +
theme_bw()
ggplot(aes(y = mean_effect, x = ES_true, color = BF > 30),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_vline(aes(xintercept = 1), color = "red") +
theme_bw()
BF_analysis_data$BF <- round(BF_analysis_data$BF, 3)
BF_analysis_data <- read.csv(file = "./data/Carneiro_distribution_equiv_method1_1.0_BF_analysis")
BF_analysis_data
ggplot(aes(y = BF, x = ES_true),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_vline(aes(xintercept = 1), color = "red") +
theme_bw()
BF_effects <-
BF_analysis_data %>%
filter(init_sample_size == 10) %>%
filter(rep_sample_size > 50) %>%
filter(mean_effect < 10) %>%
filter(p_value <= .05) %>%
filter(BF < 50)
BF_effects <-
BF_analysis_data %>%
filter(init_sample_size == 10) %>%
filter(rep_sample_size > 50) %>%
filter(mean_effect < 10) %>%
filter(p_value <= .05) %>%
filter(BF < 50)
View(BF_effects)
BF_analysis_data <- read.csv(file = "./data/Carneiro_distribution_equiv_method1_1.0_BF_analysis")
Frequentist_data <- read.csv(file = "./data/Carneiro_distribution_equiv_method1_1.0")
BF_analysis_data$p_value <- Frequentist_data$p_value
BF_analysis_data$effect <- Frequentist_data$effect
BF_analysis_data$BF <- round(BF_analysis_data$BF, 3)
BF_effects <-
BF_analysis_data %>%
filter(init_sample_size == 10) %>%
filter(rep_sample_size > 50) %>%
filter(mean_effect < 10) %>%
filter(p_value <= .05) %>%
filter(BF < 50)
ggplot(aes(y = BF, x = ES_true),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_vline(aes(xintercept = 1), color = "red") +
theme_bw()
BF_effects <-
BF_analysis_data %>%
filter(init_sample_size == 10) %>%
filter(rep_sample_size < 20) %>%
filter(mean_effect < 10) %>%
filter(p_value <= .05) %>%
filter(BF < 50)
ggplot(aes(y = BF, x = ES_true),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_vline(aes(xintercept = 1), color = "red") +
theme_bw()
BF_effects <-
BF_analysis_data %>%
filter(init_sample_size == 10) %>%
filter(rep_sample_size < 20) %>%
filter(mean_effect < 10) %>%
filter(p_value <= .05) %>%
filter(BF < 30)
ggplot(aes(y = BF, x = ES_true),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_vline(aes(xintercept = 1), color = "red") +
theme_bw()
BF_effects <-
BF_analysis_data %>%
filter(init_sample_size == 10) %>%
filter(rep_sample_size > 20) %>%
filter(mean_effect < 10) %>%
filter(p_value <= .05) %>%
filter(BF < 30)
ggplot(aes(y = BF, x = ES_true),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_vline(aes(xintercept = 1), color = "red") +
theme_bw()
BF_effects <-
BF_analysis_data %>%
filter(init_sample_size == 10) %>%
filter(rep_sample_size > 20) %>%
filter(mean_effect < 10) %>%
filter(BF < 30)
ggplot(aes(y = BF, x = ES_true, col = p_value <= .05),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_vline(aes(xintercept = 1), color = "red") +
theme_bw()
ggplot(aes(y = BF, x = p_value, col = ES_true),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_vline(aes(xintercept = 1), color = "red") +
theme_bw()
ggplot(aes(y = BF, x = p_value, col = ES_true),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.4) +
geom_hline(aes(yintercept = 1), color = "red") +
theme_bw()
ggplot(aes(y = BF, x = p_value, col = ES_true),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.9) +
geom_hline(aes(yintercept = 1), color = "red") +
theme_bw()
ggplot(aes(y = BF, x = p_value, col = rep_sample_size),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.9) +
geom_hline(aes(yintercept = 1), color = "red") +
theme_bw()
ggplot(aes(y = BF, x = p_value),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_point(alpha = 0.9) +
geom_hline(aes(yintercept = 1), color = "red") +
theme_bw()
ggplot(aes(y = BF, x = p_value),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_jitter(alpha = 0.9) +
geom_hline(aes(yintercept = 1), color = "red") +
theme_bw()
ggplot(aes(y = BF, x = p_value),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_jitter(alpha = 0.5) +
geom_hline(aes(yintercept = 1), color = "red") +
theme_bw()
ggplot(aes(y = BF, x = p_value),
data = BF_effects) +
facet_wrap(~ factor(init_sample_size)) +
geom_jitter(alpha = 0.5) +
geom_hline(aes(yintercept = 1), color = "red") +
geom_vline(aes(xintercept = .05), color = "red") +
theme_bw()
#how many hypothesis over SESOI threshold
SESOI       <- c(.3, .5, .7, 1)
mat <- matrix(NA, nrow = 3, ncol = length(SESOI),
dimnames = list(c("prev_pop", "all_positives", "all_negatives"),
c(.3, .5, .7, 1)))
prev_pop      <- vector()
all_positives <- vector()
all_negatives <- vector()
counter = 0
for (ES in SESOI) {
counter = counter + 1
prev <- round(sum(ES_true > ES)/length(ES_true), 3)
all_pos <- sum(current_ES > ES)
all_neg <- n_exp - all_pos
print(ES)
prev_pop[counter] <- prev
all_positives[counter] <- all_pos
all_negatives[counter] <- all_neg
}
setwd("~/Documents/QUEST/PhD/R/SimulateTranslation")
rm(list = ls())
# source additional functions
source("./scripts/load_packages.R")
source("./scripts/load_data_Carneiro.R")
#source("./scripts/safeguard_function.R")
#source("./scripts/functions_for_simulation_onesided.R")
source("./scripts/functions_for_sim_BF.R")
library(foreach)
library(doMC)
registerDoMC(cores = 4)
library(doParallel)
registerDoParallel()
getDoParWorkers()
n_exp <- 100
ES_true <- ES_data_Carneiro$ES_d
hist(ES_true, breaks = 200)
sum(ES_true < 0)
sum(ES_true > 0)
sum(ES_true == 0)
ES_true <- ifelse(ES_true < 0, -ES_true, -ES_true)
sum(ES_true > 0)
sum(ES_true < 0)
sum(ES_true == 0)
hist(ES_true, breaks = 200)
median(ES_true)
mean(ES_true)
set.seed(4321)
current_ES <- sample(ES_true, n_exp, replace = TRUE)
hist(current_ES, breaks = 200)
median(current_ES)
mean(current_ES)
sum(current_ES > 0)
sum(current_ES < 0)
sum(current_ES == 0)
#how many hypothesis over SESOI threshold
SESOI       <- c(.3, .5, .7, 1)
mat <- matrix(NA, nrow = 3, ncol = length(SESOI),
dimnames = list(c("prev_pop", "all_positives", "all_negatives"),
c(.3, .5, .7, 1)))
prev_pop      <- vector()
all_positives <- vector()
all_negatives <- vector()
counter = 0
for (ES in SESOI) {
counter = counter + 1
prev <- round(sum(ES_true > ES)/length(ES_true), 3)
all_pos <- sum(current_ES > ES)
all_neg <- n_exp - all_pos
print(ES)
prev_pop[counter] <- prev
all_positives[counter] <- all_pos
all_negatives[counter] <- all_neg
}
mat[1, ] <- prev_pop
mat[2, ] <- all_positives
mat[3, ] <- all_negatives
mat
samp_size_vector <- c(7, 10, 15)
samp_size_vector <- c(7, 10, 15)
list_exploratory_data <-
foreach(samp_size = samp_size_vector) %do% {
exploratory_data <- list()
for(i in 1:n_exp) {
exploratory_data[[i]] <- generate_study(current_ES[i])
exploratory_data[[i]] <-
exploratory_data[[i]] %>%
mutate(study_id = i,
ES_true = current_ES[i])
}
list_exploratory_data <- exploratory_data
}
list_exploratory_data
n_exp <- 10
ES_true <- ES_data_Carneiro$ES_d
hist(ES_true, breaks = 200)
sum(ES_true < 0)
sum(ES_true > 0)
sum(ES_true == 0)
ES_true <- ifelse(ES_true < 0, -ES_true, -ES_true)
sum(ES_true > 0)
sum(ES_true < 0)
sum(ES_true == 0)
hist(ES_true, breaks = 200)
median(ES_true)
mean(ES_true)
set.seed(4321)
current_ES <- sample(ES_true, n_exp, replace = TRUE)
hist(current_ES, breaks = 200)
median(current_ES)
mean(current_ES)
sum(current_ES > 0)
sum(current_ES < 0)
sum(current_ES == 0)
#how many hypothesis over SESOI threshold
SESOI       <- c(.3, .5, .7, 1)
mat <- matrix(NA, nrow = 3, ncol = length(SESOI),
dimnames = list(c("prev_pop", "all_positives", "all_negatives"),
c(.3, .5, .7, 1)))
prev_pop      <- vector()
all_positives <- vector()
all_negatives <- vector()
counter = 0
for (ES in SESOI) {
counter = counter + 1
prev <- round(sum(ES_true > ES)/length(ES_true), 3)
all_pos <- sum(current_ES > ES)
all_neg <- n_exp - all_pos
print(ES)
prev_pop[counter] <- prev
all_positives[counter] <- all_pos
all_negatives[counter] <- all_neg
}
mat[1, ] <- prev_pop
mat[2, ] <- all_positives
mat[3, ] <- all_negatives
mat
samp_size_vector <- c(7, 10, 15)
list_exploratory_data <-
foreach(samp_size = samp_size_vector) %do% {
exploratory_data <- list()
for(i in 1:n_exp) {
exploratory_data[[i]] <- generate_study(current_ES[i])
exploratory_data[[i]] <-
exploratory_data[[i]] %>%
mutate(study_id = i,
ES_true = current_ES[i])
}
list_exploratory_data <- exploratory_data
}
list_exploratory_data
setwd("~/Documents/QUEST/PhD/R/SimulateTranslation")
rm(list = ls())
# source additional functions
source("./scripts/load_packages.R")
source("./scripts/load_data_Carneiro.R")
#source("./scripts/safeguard_function.R")
#source("./scripts/functions_for_simulation_onesided.R")
source("./scripts/functions_for_sim_BF.R")
library(foreach)
library(doMC)
registerDoMC(cores = 4)
library(doParallel)
registerDoParallel()
getDoParWorkers()
n_exp <- 10
ES_true <- ES_data_Carneiro$ES_d
hist(ES_true, breaks = 200)
ES_true <- ifelse(ES_true < 0, -ES_true, -ES_true)
hist(ES_true, breaks = 200)
median(ES_true)
mean(ES_true)
set.seed(4321)
current_ES <- sample(ES_true, n_exp, replace = TRUE)
hist(current_ES, breaks = 200)
median(current_ES)
mean(current_ES)
#how many hypothesis over SESOI threshold
SESOI       <- c(.5, 1)
mat <- matrix(NA, nrow = 3, ncol = length(SESOI),
dimnames = list(c("prev_pop", "all_positives", "all_negatives"),
c(.5, 1)))
prev_pop      <- vector()
all_positives <- vector()
all_negatives <- vector()
counter = 0
for (ES in SESOI) {
counter = counter + 1
prev <- round(sum(ES_true > ES)/length(ES_true), 3)
all_pos <- sum(current_ES > ES)
all_neg <- n_exp - all_pos
print(ES)
prev_pop[counter] <- prev
all_positives[counter] <- all_pos
all_negatives[counter] <- all_neg
}
mat[1, ] <- prev_pop
mat[2, ] <- all_positives
mat[3, ] <- all_negatives
mat
samp_size_vector <- c(10, 15)
list_exploratory_data <-
foreach(samp_size = samp_size_vector) %do% {
exploratory_data <- list()
for(i in 1:n_exp) {
exploratory_data[[i]] <- generate_study(current_ES[i])
exploratory_data[[i]] <-
exploratory_data[[i]] %>%
mutate(study_id = i,
ES_true = current_ES[i])
}
list_exploratory_data <- exploratory_data
}
list_exploratory_data
#the confidence interval generated here is used in the equivalence test
exploratory_data_summary <- list()
plan(multiprocess)
for (i in 1:length(samp_size_vector)) {
exploratory_data_summary[[i]] <-
future_map(list_exploratory_data[[i]], get_summary_study)
}
exploratory_data_summary
exploratory_data_summary
SESOI_vector <- c(.5, 1)
list_of_selection_equiv <- list()
foreach(SESOI = SESOI_vector) %do% {
selection_equiv <- list()
for (i in 1:length(samp_size_vector)) {
selection_equiv[[i]] <- future_map(exploratory_data_summary[[i]], get_decision_equiv,
SESOI = SESOI)
}
list_of_selection_equiv <- selection_equiv
}
list_of_selection_equiv <- list()
foreach(SESOI = SESOI_vector) %do% {
selection_equiv <- list()
for (i in 1:length(samp_size_vector)) {
selection_equiv[[i]] <- future_map(exploratory_data_summary[[i]], get_decision_equiv,
SESOI = SESOI)
selection_equiv[[i]] <-
selection_equiv[[i]] %>%
mutate(study_id = i,
ES_true = current_ES[i])
}
list_of_selection_equiv <- selection_equiv
}
exploratory_data
list_of_selection_equiv <- list()
foreach(SESOI = SESOI_vector) %do% {
selection_equiv <- list()
for (i in 1:length(samp_size_vector)) {
selection_equiv[[i]] <- future_map(exploratory_data_summary[[i]], get_decision_equiv,
SESOI = SESOI)
}
list_of_selection_equiv <- selection_equiv
}
unlist(list_of_selection_equiv)
selection_equiv
list_of_selection_equiv
samp_size_vector <- c(10, 15)
list_exploratory_data <-
foreach(samp_size = samp_size_vector) %do% {
exploratory_data <- list()
for(i in 1:n_exp) {
exploratory_data[[i]] <- generate_study(current_ES[i])
exploratory_data[[i]] <-
exploratory_data[[i]] %>%
mutate(study_id = i,
ES_true = current_ES[i])
}
list_exploratory_data <- exploratory_data
}
#the confidence interval generated here is used in the equivalence test
exploratory_data_summary <- list()
plan(multiprocess)
for (i in 1:length(samp_size_vector)) {
exploratory_data_summary[[i]] <-
future_map(list_exploratory_data[[i]], get_summary_study)
}
SESOI_vector <- c(.5, 1)
list_of_selection_equiv <- list()
foreach(SESOI = SESOI_vector) %do% {
selection_equiv <- list()
for (i in 1:length(samp_size_vector)) {
selection_equiv[[i]] <- future_map(exploratory_data_summary[[i]], get_decision_equiv,
SESOI = SESOI)
}
list_of_selection_equiv <- selection_equiv
}
list_of_selection_equiv
test_list <- unlist(list_of_selection_equiv)
test_list
selection_equiv
list_of_selection_equiv <- list()
foreach(SESOI = SESOI_vector) %do% {
selection_equiv <- list()
for (i in 1:length(samp_size_vector)) {
selection_equiv[[i]] <- future_map(exploratory_data_summary[[i]], get_decision_equiv,
SESOI = SESOI)
}
list_of_selection_equiv <- selection_equiv
}
View(list_of_selection_equiv)
View(selection_equiv)
SESOI_vector <- c(.5, 1)
list_of_selection_equiv <- list()
foreach(SESOI = SESOI_vector) %do% {
selection_equiv <- list()
for (i in 1:length(samp_size_vector)) {
selection_equiv[[i]] <- future_map(exploratory_data_summary[[i]], get_decision_equiv,
SESOI = SESOI)
}
list_of_selection_equiv <- selection_equiv
}
View(selection_equiv)
View(list_of_selection_equiv)
View(selection_equiv)
View(list_of_selection_equiv)
View(selection_equiv)
list_of_selection_equiv[[1]]
list_of_selection_equiv[[2]]
list_of_selection_equiv[[3]]
list_of_selection_equiv[[1]][[1]]
list_of_selection_equiv
list_of_selection_equiv[[1]][[10]]
SESOI_vector <- c(.5, 1)
list_of_selection_equiv <- list()
foreach(SESOI = SESOI_vector) %do% {
selection_equiv <- list()
for (i in 1:length(samp_size_vector)) {
selection_equiv[[i]] <- future_map(exploratory_data_summary[[i]], get_decision_equiv,
SESOI = SESOI)
}
list_of_selection_equiv <- selection_equiv
}
list_of_selection_equiv[[1]][[10]]
list_of_selection_equiv[[2]][[2]][[10]]
list_of_selection_equiv[[2]][[2]][[1]]
list_of_selection_equiv[[2]][[2]]
list_of_selection_equiv[[2]][[2]]
list_of_selection_equiv[[3]][[2]]
list_of_selection_equiv[[2]][[2]]
list_of_selection_equiv[[2]][[2]]
list_of_selection_equiv[[2]]
list_of_selection_equiv[[1]]
setwd("~/Documents/QUEST/PhD/R/SimulateTranslation")
rm(list = ls())
setwd("~/Documents/QUEST/PhD/R/SimulateTranslation")
rm(list = ls())
# source additional functions
source("./scripts/load_packages.R")
source("./scripts/load_data_Carneiro.R")
#source("./scripts/safeguard_function.R")
#source("./scripts/functions_for_simulation_onesided.R")
source("./scripts/functions_for_sim_BF.R")
